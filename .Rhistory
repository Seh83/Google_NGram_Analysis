file_output <- function (x, y){
path <- paste(work_dir, x, sep ="")
write.table(y, file = path, sep = ",", row.names = FALSE)
}
## Function import Adwords file. Define file name and remove the 'Total' row.
## Non-latin characters. This was dealt with through converting to ASCII via powershell.
## Get-Content [old file]|Set-Content [new file] -encoding ASCII
adwords_import <- function(x) {
wip <- read.csv(x, as.is=TRUE, sep="\t", quote="", skip=5, fill=TRUE, flush=TRUE)
wip <- subset(wip, wip$Account !="Total")
return(wip)
}
## Function to clean up columns imported as strings due to adwords/MS csv ',' weirdness
chr_number <- function(x, y) {
x[,y] <- as.numeric(gsub("[^0-9\\.]","", x[,y]))
}
## This is formated for testing purposes, using static file reference.
searchTerm.work_file <- adwords_import(adwordsFile)
## Convert column to numeric.
searchTerm.work_file[, "Cost"] <- chr_number(searchTerm.work_file, "Cost")
## AdWords: need to add labels based on a campaign name match as per external array.
## Loading label array and using the native match function.
adwords.labels <- read.csv(labelsFile, header = TRUE, as.is=TRUE, sep=",", quote="\"")
searchTerm.work_file$Labels <- adwords.labels$Labels[match(searchTerm.work_file$Campaign,adwords.labels$Campaign)]
head(searchTerm.work_file)
## Create a subset to work with.
searchTerm.work_file <- searchTerm.work_file[sample(nrow(searchTerm.work_file),size = 5000, replace = TRUE),]
## Creating the ngram objects and data frames from the
termVector <- toString(searchTerm.work_file[,'Search.term'])
twoGram <- ngram(termVector)
threeGram <- ngram(termVector, n = 3)
## Create the ngram data frames.
ngram2 <- data.frame(V1 = unique(gsub(",", "", get.ngrams(twoGram))))
ngram3 <- data.frame(V1 = unique(gsub(",", "", get.ngrams(threeGram))))
## Remove rows with ?? characters.
ngram2 <- data.frame(ngram2[!(ngram2$V1=="??"),])
ngram3 <- data.frame(ngram3[!(ngram3$V1=="??"),])
ngram2$V1 <- gsub("[0-9]+", "##", ngram2$V1)
ngram3$V1 <- gsub("[0-9]+", "##", ngram3$V1)
ngram2
str(ngram2)
## Create the ngram data frames.
ngram2 <- data.frame(V1 = unique(gsub(",", "", get.ngrams(twoGram))))
ngram3 <- data.frame(V1 = unique(gsub(",", "", get.ngrams(threeGram))))
## Remove rows with ?? characters.
ngram2 <- data.frame(V1 = ngram2[!(ngram2$V1=="??"),])
ngram3 <- data.frame(V1 = ngram3[!(ngram3$V1=="??"),])
## Replace numeric values with '##'.
ngram2$V1 <- gsub("[0-9]+", "##", ngram2$V1)
ngram3$V1 <- gsub("[0-9]+", "##", ngram3$V1)
str(ngram2)
## Clean up duplicate values after numerics have been changed.
ngram2 <- unique(ngram2)
ngram3 <- unique(ngram3)
## Convert data frame to data table
searchTerm.work_file <- data.table(searchTerm.work_file)
labelNgrams.work_file2 <- data.frame()
## Loops, because I just plain hate myself.
for(i in ngram2$V1){
tryCatch({
wip <- aggregate(cbind(Impressions, Clicks, Cost, Converted.clicks) ~ Labels + Campaign + Keyword + Search.term, data = searchTerm.work_file[Search.term  %like%  paste('%',i,'%', sep = "")], sum)
wip[, "ngram"] <- i
labelNgrams.work_file2 <- rbind(labelNgrams.work_file2, wip)
}, error = function(e){})
}
## Add performance columns
labelNgrams.work_file2$ctr <- labelNgrams.work_file2$Clicks/labelNgrams.work_file2$Impressions
labelNgrams.work_file2$cpc <- labelNgrams.work_file2$Cost/labelNgrams.work_file2$Clicks
labelNgrams.work_file2$cpa <- labelNgrams.work_file2$Cost/labelNgrams.work_file2$Converted.clicks
labelNgrams.work_file2$cvr <- labelNgrams.work_file2$Converted.clicks/labelNgrams.work_file2$Clicks
## Sort out inf values for processing.
labelNgrams.work_file2$cpa[is.infinite(labelNgrams.work_file2$cpa)] <- NA
## Data Export
file_output(paste0("//ngrams_",dateString, "_2word.csv"), labelNgrams.work_file2)
labelNgrams.work_file3 <- data.frame()
## Loops, because I just plain hate myself.
for(i in ngram3$V1){
tryCatch({
wip <- aggregate(cbind(Impressions, Clicks, Cost, Converted.clicks) ~ Labels + Campaign + Keyword + Search.term, data = searchTerm.work_file[Search.term  %like%  paste('%',i,'%', sep = "")], sum)
wip[, "ngram"] <- i
labelNgrams.work_file3 <- rbind(labelNgrams.work_file3, wip)
}, error = function(e){})
}
## Add performance columns
labelNgrams.work_file3$ctr <- labelNgrams.work_file3$Clicks/labelNgrams.work_file3$Impressions
labelNgrams.work_file3$cpc <- labelNgrams.work_file3$Cost/labelNgrams.work_file3$Clicks
labelNgrams.work_file3$cpa <- labelNgrams.work_file3$Cost/labelNgrams.work_file3$Converted.clicks
labelNgrams.work_file3$cvr <- labelNgrams.work_file3$Converted.clicks/labelNgrams.work_file3$Clicks
## Sort out inf values for processing.
labelNgrams.work_file3$cpa[is.infinite(labelNgrams.work_file3$cpa)] <- NA
## Data Export
file_output(paste0("//ngrams_",dateString, "_3word.csv"), labelNgrams.work_file3)
## ngram tables by labels for account sections.
## Processing, analysis and visualisation.
summary2Gram <- aggregate(cbind(Cost, Clicks) ~ ngram + Labels, data = labelNgrams.work_file2, sum)
summary2Gram$cpc <- summary2Gram$Cost/summary2Gram$Clicks
summary2Gram$cpc[is.infinite(summary2Gram$cpc)] <- NA
## Basic display of clicks across labels per ngram.
summary2Dcast <- dcast(summary2Gram, ngram ~ Labels, value.var = 'Clicks', fun.aggregate = sum)
summary2Dcast$total <- rowSums(summary2Dcast[, c(2:9)])
summary2Dcast <- arrange(summary2Dcast, desc(total))
## Same again for the 3 gram data
summary3Gram <- aggregate(cbind(Cost, Clicks) ~ ngram + Labels, data = labelNgrams.work_file3, sum)
summary3Gram$cpc <- summary3Gram$Cost/summary3Gram$Clicks
summary3Gram$cpc[is.infinite(summary3Gram$cpc)] <- NA
## Basic display of clicks across labels per ngram.
summary3Dcast <- dcast(summary3Gram, ngram ~ Labels, value.var = 'Clicks', fun.aggregate = sum)
summary3Dcast$total <- rowSums(summary3Dcast[, c(2:9)])
summary3Dcast <- arrange(summary3Dcast, desc(total))
## Graph Time
# A number of visualisations for examining distribution and characteristics of phrase parts in the account.
## Display distribution of clicks by ngrams.
# Create the data set for the graph.
summary2Graph <- aggregate(cbind(Impressions, Cost, Clicks, Converted.clicks) ~ ngram, data = labelNgrams.work_file2, sum)
## Set as data table.
summary2Graph <- data.table(summary2Graph)
#summary2Graph <- summary2Graph[Clicks > 30]
## Change the order of the rows to descending by clicks. Perform a log transformation and a normalisation on Clicks.
summary2Graph <- summary2Graph[order(-Clicks),]
summary2Graph$logClick <- log(summary2Graph$Clicks)
summary2Graph$sdClick <- (summary2Graph$logClick - mean(summary2Graph$logClick))/sd(summary2Graph$logClick)
## Adding a number column to the data table for each row.
summary2Graph[, Ngram.number := 1:.N]
## Inital distribution graph.
ggplot(summary2Graph, aes(x = Ngram.number, y = logClick)) + geom_area(fill= "black", alpha = .2) + geom_line() + ggtitle("Example Distribution of Clicks by Search Terms [unfiltered]")
## Create data set for box plots showing distribution of CVR by campaign and labels.
graphSet01.S2 <- aggregate(cbind(Impressions, Cost, Clicks, Converted.clicks) ~ ngram + Campaign + Labels, data = labelNgrams.work_file2, sum)
graphSet01.S2$logClicks <- log(graphSet01.S2$Clicks)
graphSet01.S2$logCost <- log(graphSet01.S2$Cost)
## Setting the data frame as a data table.
graphSet01.S2 <- data.table(graphSet01.S2)
## Distribution of ngrams by cost and clicks.
ggplot(graphSet01.S2, aes(x = logCost, y = logClicks)) + geom_point() + ggtitle("Example Clicks to Cost Scatter Plot") + facet_wrap( ~ Labels, ncol = 2)
## Creating and cleaning the CVR column.
graphSet01.S2$cvr <- graphSet01.S2$Converted.clicks/graphSet01.S2$Clicks
graphSet01.S2$cvr[is.infinite(graphSet01.S2$cvr)] <- NA
graphSet01.S2$cpc <- graphSet01.S2$Cost/graphSet01.S2$Clicks
graphSet01.S2$cpc[is.infinite(graphSet01.S2$cpc)] <- NA
graphSet01.S2$cpa <- graphSet01.S2$Cost/graphSet01.S2$Converted.clicks
graphSet01.S2$cpa[is.infinite(graphSet01.S2$cpa)] <- NA
## Create log values for graphing.
graphSet01.S2$logClicks <- log(graphSet01.S2$Clicks)
graphSet01.S2$logCost <- log(graphSet01.S2$Cost)
graphSet01.S2$sqrtCost <- sqrt(graphSet01.S2$Cost)
graphSet01.S2$sdCost <- sd(graphSet01.S2$Cost)
## Setting the data frame as a data table.
graphSet01.S2 <- data.table(graphSet01.S2)
## Quick scatter plot for visualising extreme values where only the highest cost examples are labelled.
ggplot(graphSet01.S2[Clicks > 10], aes(x = Clicks, y = cvr, size = sqrtCost)) + geom_point() + facet_wrap( ~ Labels, ncol = 2) + geom_text(aes(label = ifelse((Cost-mean(Cost))/sdCost > 3, ngram, "")), hjust = 1, vjust = 1) + ggtitle("Example CVR scatterplot by Labels [unfiltered]")
## Create the cut down data set for the confidence interval graph.
confSet <- graphSet01.S2[ Clicks > 10 & Converted.clicks > 0 ,c(1:3, 6:7, 10), with = FALSE]
## Create the grouping for the summarise function.
grouped <- group_by(confSet, Campaign, Labels)
## Create a data set including summary statistics for differences from means.
confSum.df <- summarise(grouped, mcvr = sum(Converted.clicks)/sum(Clicks), n = length(cvr), mean = mean(cvr), sd = sd(cvr), se = sd(cvr) / sqrt(length(cvr)), ci = (sd(cvr) / sqrt(length(cvr))) * (qt(0.95/2 + .5, length(cvr)-1)))
## Means for labels.
grouped.2 <- group_by(searchTerm.work_file, Labels)
confSum2.df <- summarise(grouped.2, cvr = sum(Converted.clicks)/sum(Clicks), n = length(Search.term))
confSum2.df <- data.table(confSum2.df)
## Plot campaign proportions and and the confidence intervals for ngrams in a chart against label effective CVR.
ggplot(confSum.df, aes(x = Campaign, y = mcvr, group = 1)) + geom_errorbar(width=.1, aes(ymin = mcvr - ci, ymax = mcvr + ci)) + geom_point(shape = 21, size = 3, fill = "white") + facet_wrap( ~ Labels, ncol = 2) + geom_hline(data = confSum2.df, aes(yintercept = cvr)) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + scale_x_discrete(labels = abbreviate)
str(ngram2)
searchTerm.work_file <- data.table(searchTerm.work_file)
labelNgrams.work_file2 <- data.frame()
head(searchTerm.work_file)
str(labelNgrams.work_file2)
ngram3$V1
rm(labelNgrams.work_file2)
## Convert data frame to data table
searchTerm.work_file <- data.table(searchTerm.work_file)
#labelNgrams.work_file2 <- data.frame()
## Loops, because I just plain hate myself.
for(i in ngram2$V1){
tryCatch({
wip <- aggregate(cbind(Impressions, Clicks, Cost, Converted.clicks) ~ Labels + Campaign + Keyword + Search.term, data = searchTerm.work_file[Search.term  %like%  paste('%',i,'%', sep = "")], sum)
wip[, "ngram"] <- i
labelNgrams.work_file2 <- rbind(labelNgrams.work_file2, wip)
}, error = function(e){})
}
labelNgrams.work_file2 <- data.frame()
## Loops, because I just plain hate myself.
for(i in ngram2$V1){
tryCatch({
wip <- aggregate(cbind(Impressions, Clicks, Cost, Converted.clicks) ~ Labels + Campaign + Keyword + Search.term, data = searchTerm.work_file[Search.term  %like%  paste('%',i,'%', sep = "")], sum)
wip[, "ngram"] <- i
labelNgrams.work_file2 <- rbind(labelNgrams.work_file2, wip)
}, error = function(e){})
}
searchTerm.work_file[Search.term  %like%  paste('%',"to bali",'%', sep = "")]
searchTerm.work_file[Search.term  %like%  paste("%","to bali","%", sep = "")]
searchTerm.work_file[Search.term  %like%  paste("to bali", sep = "")]
searchTerm.work_file[Search.term  %like%  paste0("%","to bali","%", sep = "")]
searchTerm.work_file[Search.term  %like%  paste0("%","to bali","%")]
searchTerm.work_file[Search.term  %like% "to bali"]
str(searchTerm.work_file)
searchTerm.work_file[Search.term  %in% "to bali"]
searchTerm.work_file[Search.term %in% "to bali"]
searchTerm.work_file[Search.term %in% "next text word uno"]
searchTerm.work_file[Search.term %in% "next text word"]
searchTerm.work_file[Search.term %in% "next text"]
searchTerm.work_file[Search.term %in% "next text"]
searchTerm.work_file[Search.term  %like%  paste('%',"next text",'%', sep = "")]
searchTerm.work_file[Search.term  %like%  paste("%","next text","%", sep = "")]
searchTerm.work_file[Search.term  %like%  paste0("%","next text","%", sep = "")]
searchTerm.work_file[Search.term  %like%  paste0("%","next text","%")]
searchTerm.work_file[Search.term  %like%  paste0(" ","next text"," ")]
searchTerm.work_file[Search.term  %like%  paste0(" ","next text"," ", sep = "")]
searchTerm.work_file[Search.term  %like%  paste(" ","next text"," ", sep = "")]
searchTerm.work_file[Search.term  %in%  paste(" ","next text"," ", sep = "")]
searchTerm.work_file[Search.term  %in%  paste("\\s","next text","\\s", sep = "")]
searchTerm.work_file[Search.term  %in%  paste("\\w","next text","\\w", sep = "")]
searchTerm.work_file[Search.term  %in%  paste("\\W","next text","\\W", sep = "")]
searchTerm.work_file[Search.term  %in%  paste("\\s","next text","\\s", sep = "")]
searchTerm.work_file[Search.term  %in%  "\\snext text\\s"]
searchTerm.work_file[Search.term %like% "\\snext text\\s"]
searchTerm.work_file[Search.term %like% "\\stext\\s"]
searchTerm.work_file[Search.term %like% "\\snext text\\s"]
searchTerm.work_file[Search.term %like% "%next text%"]
searchTerm.work_file[Search.term %like% "%next%"]
searchTerm.work_file[Search.term %like% "%text%"]
searchTerm.work_file[Search.term  %in%  paste("\\s","text","\\s", sep = "")]
searchTerm.work_file[Search.term  %like%  paste("\\s","text","\\s", sep = "")]
searchTerm.work_file[Search.term %like% paste("\\s","next\\stext","\\s", sep = "")]
searchTerm.work_file[Search.term %like% paste("\\s","next%text","\\s", sep = "")]
searchTerm.work_file[Search.term %like% paste("\\s","next text","\\s", sep = "")]
searchTerm.work_file[Search.term %like% paste("\\s","next text","\\s", sep = " ")]
searchTerm.work_file[Search.term %like% paste("\\s","next text","\\s", sep = "")]
searchTerm.work_file[Search.term %like% "next text"]
searchTerm.work_file[Search.term %like% "%next text%"]
searchTerm.work_file[Search.term %like% "\\%next text\\%"]
searchTerm.work_file[Search.term %like% "\%next text\%"]
searchTerm.work_file[Search.term %like% "%next text%"]
searchTerm.work_file[Search.term %like% "\\snext text\\s"]
searchTerm.work_file[Search.term %like% grep("\\snext text\\s")]
searchTerm.work_file[Search.term %like% grep("\\snext text\\s")]
searchTerm.work_file[Search.term %like% paste("\\s","next text","\\s", sep = "")]
searchTerm.work_file[grep(paste("\\s","next text","\\s", sep = ""), searchTerm.work_file$Search.term)]
searchTerm.work_file[grep(paste("\\s","next text","\\s", sep = ""), searchTerm.work_file$Search.term),]
searchTerm.work_file[grep(paste("\\s","text","\\s", sep = ""), searchTerm.work_file$Search.term),]
## Loops, because I just plain hate myself.
for(i in ngram2$V1){
tryCatch({
wip <- aggregate(cbind(Impressions, Clicks, Cost, Converted.clicks) ~ Labels + Campaign + Keyword + Search.term, data = searchTerm.work_file[Search.term  %like%  paste('^',i,'$', sep = "") | Search.term  %like%  paste('^',i,'\\s', sep = "") | Search.term  %like%  paste('\\s',i,'$', sep = "")], sum)
wip[, "ngram"] <- i
labelNgrams.work_file2 <- rbind(labelNgrams.work_file2, wip)
}, error = function(e){})
}
## Loops, because I just plain hate myself.
for(i in ngram2$V1){
tryCatch({
wip <- aggregate(cbind(Impressions, Clicks, Cost, Converted.clicks) ~ Labels + Campaign + Keyword + Search.term, data = searchTerm.work_file[Search.term  %like%  paste('^',i,'$', sep = "") | Search.term  %like%  paste('^',i,'\\s', sep = "") | Search.term  %like%  paste('\\s',i,'$', sep = "")], sum)
wip[, "ngram"] <- i
labelNgrams.work_file2 <- rbind(labelNgrams.work_file2, wip)
}, error = function(e){})
}
View(labelNgrams.work_file2)
labelNgrams.work_file2 <- data.frame()
for(i in ngram2$V1){
tryCatch({
wip <- aggregate(cbind(Impressions, Clicks, Cost, Converted.clicks) ~ Labels + Campaign + Keyword + Search.term, data = searchTerm.work_file[Search.term  %like%  paste('^',i,'$', sep = "") | Search.term  %like%  paste('^',i,'\\s', sep = "") | Search.term  %like%  paste('\\s',i,'$', sep = "") | Search.term  %like%  paste('\\s',i,'\\s', sep = "")], sum)
wip[, "ngram"] <- i
labelNgrams.work_file2 <- rbind(labelNgrams.work_file2, wip)
}, error = function(e){})
}
## Prototype AdWords Search Term phrase part analysis 1.00
## Importing AdWords CSV.
## Processing for sharing.
library(data.table)
library(reshape2)
library(plyr)
library(dplyr)
library(ngram)
library(ggplot2)
library(AppliedPredictiveModeling)
library(caret)
## PROCESS SUMMARY
# Download AdWords Report.
#   Columns: "Account", "Device", "Network..with.search.partners.", "Search.term", "Match.type", "Clicks", "Impressions", "Cost", "Avg..position", "Added.Excluded", "Converted.clicks", "Campaign", "Ad.group", "Keyword"
# Process/clean AdWords search term report:
#   Open Windows Powershell. Navigate to the appropriate directory.
#   Use following command to convert the file to ASCII to deal with unicode characters:
#   Get-Content [old file]|Set-Content [new file] -encoding ASCII
# Change settings and file references below.
## General settings.
workingDirectory <- "C://Users//Anthony//Documents//GitHub//phrasePartAnalysis" # Place all data files here #
adwordsFile <- "example_set.csv" # Processed search term report
labelsFile <- "label_file.csv" # CSV file. Column heads: Campaign, Labels.
dateString <- format(Sys.time(), "%Y%m%d")
## General Comments on data:
# The numbers provided by AdWords need be be processed to coerce to int/number, due to four digital and up numbers exported with ','
# Dates need to be processed to change from chr to date
## Setting up the working directory for all data file references.
# Ensure all data files for use are in the working directory.
setwd(workingDirectory)
work_dir <- getwd()
## Function for exporting tables to CSVs.
##Directory path other than work directory and extension needs to be defined 'x', 'y' is the table to be exported.
file_output <- function (x, y){
path <- paste(work_dir, x, sep ="")
write.table(y, file = path, sep = ",", row.names = FALSE)
}
## Function import Adwords file. Define file name and remove the 'Total' row.
## Non-latin characters. This was dealt with through converting to ASCII via powershell.
## Get-Content [old file]|Set-Content [new file] -encoding ASCII
adwords_import <- function(x) {
wip <- read.csv(x, as.is=TRUE, sep="\t", quote="", skip=5, fill=TRUE, flush=TRUE)
wip <- subset(wip, wip$Account !="Total")
return(wip)
}
## Function to clean up columns imported as strings due to adwords/MS csv ',' weirdness
chr_number <- function(x, y) {
x[,y] <- as.numeric(gsub("[^0-9\\.]","", x[,y]))
}
## This is formated for testing purposes, using static file reference.
searchTerm.work_file <- adwords_import(adwordsFile)
## Convert column to numeric.
searchTerm.work_file[, "Cost"] <- chr_number(searchTerm.work_file, "Cost")
## AdWords: need to add labels based on a campaign name match as per external array.
## Loading label array and using the native match function.
adwords.labels <- read.csv(labelsFile, header = TRUE, as.is=TRUE, sep=",", quote="\"")
searchTerm.work_file$Labels <- adwords.labels$Labels[match(searchTerm.work_file$Campaign,adwords.labels$Campaign)]
head(searchTerm.work_file)
## Create a subset to work with.
searchTerm.work_file <- searchTerm.work_file[sample(nrow(searchTerm.work_file),size = 5000, replace = TRUE),]
## Creating the ngram objects and data frames from the
termVector <- toString(searchTerm.work_file[,'Search.term'])
twoGram <- ngram(termVector)
threeGram <- ngram(termVector, n = 3)
## Create the ngram data frames.
ngram2 <- data.frame(V1 = unique(gsub(",", "", get.ngrams(twoGram))))
ngram3 <- data.frame(V1 = unique(gsub(",", "", get.ngrams(threeGram))))
## Remove rows with ?? characters.
ngram2 <- data.frame(V1 = ngram2[!(ngram2$V1=="??"),])
ngram3 <- data.frame(V1 = ngram3[!(ngram3$V1=="??"),])
## Replace numeric values with '##'.
ngram2$V1 <- gsub("[0-9]+", "##", ngram2$V1)
ngram3$V1 <- gsub("[0-9]+", "##", ngram3$V1)
## Clean up duplicate values after numerics have been changed.
ngram2 <- unique(ngram2)
ngram3 <- unique(ngram3)
## Convert data frame to data table
searchTerm.work_file <- data.table(searchTerm.work_file)
labelNgrams.work_file2 <- data.frame()
## Loops, because I just plain hate myself.
for(i in ngram2$V1){
tryCatch({
wip <- aggregate(cbind(Impressions, Clicks, Cost, Converted.clicks) ~ Labels + Campaign + Keyword + Search.term, data = searchTerm.work_file[Search.term  %like%  paste('^',i,'$', sep = "") | Search.term  %like%  paste('^',i,'\\s', sep = "") | Search.term  %like%  paste('\\s',i,'$', sep = "") | Search.term  %like%  paste('\\s',i,'\\s', sep = "")], sum)
wip[, "ngram"] <- i
labelNgrams.work_file2 <- rbind(labelNgrams.work_file2, wip)
}, error = function(e){})
}
## Add performance columns
labelNgrams.work_file2$ctr <- labelNgrams.work_file2$Clicks/labelNgrams.work_file2$Impressions
labelNgrams.work_file2$cpc <- labelNgrams.work_file2$Cost/labelNgrams.work_file2$Clicks
labelNgrams.work_file2$cpa <- labelNgrams.work_file2$Cost/labelNgrams.work_file2$Converted.clicks
labelNgrams.work_file2$cvr <- labelNgrams.work_file2$Converted.clicks/labelNgrams.work_file2$Clicks
## Sort out inf values for processing.
labelNgrams.work_file2$cpa[is.infinite(labelNgrams.work_file2$cpa)] <- NA
## Data Export
file_output(paste0("//ngrams_",dateString, "_2word.csv"), labelNgrams.work_file2)
labelNgrams.work_file3 <- data.frame()
## Loops, because I just plain hate myself.
for(i in ngram3$V1){
tryCatch({
wip <- aggregate(cbind(Impressions, Clicks, Cost, Converted.clicks) ~ Labels + Campaign + Keyword + Search.term, data = searchTerm.work_file[Search.term  %like%  paste('^',i,'$', sep = "") | Search.term  %like%  paste('^',i,'\\s', sep = "") | Search.term  %like%  paste('\\s',i,'$', sep = "") | Search.term  %like%  paste('\\s',i,'\\s', sep = "")], sum)
wip[, "ngram"] <- i
labelNgrams.work_file3 <- rbind(labelNgrams.work_file3, wip)
}, error = function(e){})
}
## Add performance columns
labelNgrams.work_file3$ctr <- labelNgrams.work_file3$Clicks/labelNgrams.work_file3$Impressions
labelNgrams.work_file3$cpc <- labelNgrams.work_file3$Cost/labelNgrams.work_file3$Clicks
labelNgrams.work_file3$cpa <- labelNgrams.work_file3$Cost/labelNgrams.work_file3$Converted.clicks
labelNgrams.work_file3$cvr <- labelNgrams.work_file3$Converted.clicks/labelNgrams.work_file3$Clicks
## Sort out inf values for processing.
labelNgrams.work_file3$cpa[is.infinite(labelNgrams.work_file3$cpa)] <- NA
## Data Export
file_output(paste0("//ngrams_",dateString, "_3word.csv"), labelNgrams.work_file3)
## ngram tables by labels for account sections.
## Processing, analysis and visualisation.
summary2Gram <- aggregate(cbind(Cost, Clicks) ~ ngram + Labels, data = labelNgrams.work_file2, sum)
summary2Gram$cpc <- summary2Gram$Cost/summary2Gram$Clicks
summary2Gram$cpc[is.infinite(summary2Gram$cpc)] <- NA
## Basic display of clicks across labels per ngram.
summary2Dcast <- dcast(summary2Gram, ngram ~ Labels, value.var = 'Clicks', fun.aggregate = sum)
summary2Dcast$total <- rowSums(summary2Dcast[, c(2:9)])
summary2Dcast <- arrange(summary2Dcast, desc(total))
## Same again for the 3 gram data
summary3Gram <- aggregate(cbind(Cost, Clicks) ~ ngram + Labels, data = labelNgrams.work_file3, sum)
summary3Gram$cpc <- summary3Gram$Cost/summary3Gram$Clicks
summary3Gram$cpc[is.infinite(summary3Gram$cpc)] <- NA
## Basic display of clicks across labels per ngram.
summary3Dcast <- dcast(summary3Gram, ngram ~ Labels, value.var = 'Clicks', fun.aggregate = sum)
summary3Dcast$total <- rowSums(summary3Dcast[, c(2:9)])
summary3Dcast <- arrange(summary3Dcast, desc(total))
## Graph Time
# A number of visualisations for examining distribution and characteristics of phrase parts in the account.
## Display distribution of clicks by ngrams.
# Create the data set for the graph.
summary2Graph <- aggregate(cbind(Impressions, Cost, Clicks, Converted.clicks) ~ ngram, data = labelNgrams.work_file2, sum)
## Set as data table.
summary2Graph <- data.table(summary2Graph)
#summary2Graph <- summary2Graph[Clicks > 30]
## Change the order of the rows to descending by clicks. Perform a log transformation and a normalisation on Clicks.
summary2Graph <- summary2Graph[order(-Clicks),]
summary2Graph$logClick <- log(summary2Graph$Clicks)
summary2Graph$sdClick <- (summary2Graph$logClick - mean(summary2Graph$logClick))/sd(summary2Graph$logClick)
## Adding a number column to the data table for each row.
summary2Graph[, Ngram.number := 1:.N]
## Inital distribution graph.
ggplot(summary2Graph, aes(x = Ngram.number, y = logClick)) + geom_area(fill= "black", alpha = .2) + geom_line() + ggtitle("Example Distribution of Clicks by Search Terms [unfiltered]")
## Create data set for box plots showing distribution of CVR by campaign and labels.
graphSet01.S2 <- aggregate(cbind(Impressions, Cost, Clicks, Converted.clicks) ~ ngram + Campaign + Labels, data = labelNgrams.work_file2, sum)
graphSet01.S2$logClicks <- log(graphSet01.S2$Clicks)
graphSet01.S2$logCost <- log(graphSet01.S2$Cost)
## Setting the data frame as a data table.
graphSet01.S2 <- data.table(graphSet01.S2)
## Distribution of ngrams by cost and clicks.
ggplot(graphSet01.S2, aes(x = logCost, y = logClicks)) + geom_point() + ggtitle("Example Clicks to Cost Scatter Plot") + facet_wrap( ~ Labels, ncol = 2)
## Creating and cleaning the CVR column.
graphSet01.S2$cvr <- graphSet01.S2$Converted.clicks/graphSet01.S2$Clicks
graphSet01.S2$cvr[is.infinite(graphSet01.S2$cvr)] <- NA
graphSet01.S2$cpc <- graphSet01.S2$Cost/graphSet01.S2$Clicks
graphSet01.S2$cpc[is.infinite(graphSet01.S2$cpc)] <- NA
graphSet01.S2$cpa <- graphSet01.S2$Cost/graphSet01.S2$Converted.clicks
graphSet01.S2$cpa[is.infinite(graphSet01.S2$cpa)] <- NA
## Create log values for graphing.
graphSet01.S2$logClicks <- log(graphSet01.S2$Clicks)
graphSet01.S2$logCost <- log(graphSet01.S2$Cost)
graphSet01.S2$sqrtCost <- sqrt(graphSet01.S2$Cost)
graphSet01.S2$sdCost <- sd(graphSet01.S2$Cost)
## Setting the data frame as a data table.
graphSet01.S2 <- data.table(graphSet01.S2)
## Quick scatter plot for visualising extreme values where only the highest cost examples are labelled.
ggplot(graphSet01.S2[Clicks > 10], aes(x = Clicks, y = cvr, size = sqrtCost)) + geom_point() + facet_wrap( ~ Labels, ncol = 2) + geom_text(aes(label = ifelse((Cost-mean(Cost))/sdCost > 3, ngram, "")), hjust = 1, vjust = 1) + ggtitle("Example CVR scatterplot by Labels [unfiltered]")
## Create the cut down data set for the confidence interval graph.
confSet <- graphSet01.S2[ Clicks > 10 & Converted.clicks > 0 ,c(1:3, 6:7, 10), with = FALSE]
## Create the grouping for the summarise function.
grouped <- group_by(confSet, Campaign, Labels)
## Create a data set including summary statistics for differences from means.
confSum.df <- summarise(grouped, mcvr = sum(Converted.clicks)/sum(Clicks), n = length(cvr), mean = mean(cvr), sd = sd(cvr), se = sd(cvr) / sqrt(length(cvr)), ci = (sd(cvr) / sqrt(length(cvr))) * (qt(0.95/2 + .5, length(cvr)-1)))
## Means for labels.
grouped.2 <- group_by(searchTerm.work_file, Labels)
confSum2.df <- summarise(grouped.2, cvr = sum(Converted.clicks)/sum(Clicks), n = length(Search.term))
confSum2.df <- data.table(confSum2.df)
## Plot campaign proportions and and the confidence intervals for ngrams in a chart against label effective CVR.
ggplot(confSum.df, aes(x = Campaign, y = mcvr, group = 1)) + geom_errorbar(width=.1, aes(ymin = mcvr - ci, ymax = mcvr + ci)) + geom_point(shape = 21, size = 3, fill = "white") + facet_wrap( ~ Labels, ncol = 2) + geom_hline(data = confSum2.df, aes(yintercept = cvr)) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + scale_x_discrete(labels = abbreviate)
summary2Dcast
View(summary2Dcast)
summary2Dcast$total <- rowSums(summary2Dcast[, c(2:9)])
summary2Dcast <- dcast(summary2Gram, ngram ~ Labels, value.var = 'Clicks', fun.aggregate = sum)
summary2Dcast$total <- rowSums(summary2Dcast[, c(2:9)])
summary2Dcast <- dcast(summary2Gram, ngram ~ Labels, value.var = 'Clicks', fun.aggregate = sum)
summary2Dcast
summary2Dcast$total <- rowSums(summary2Dcast[, c(2:3)])
summary2Dcast <- arrange(summary2Dcast, desc(total))
summary2Dcast
## Basic display of clicks across labels per ngram.
summary3Dcast <- dcast(summary3Gram, ngram ~ Labels, value.var = 'Clicks', fun.aggregate = sum)
summary3Dcast$total <- rowSums(summary3Dcast[, c(2:3)])
summary3Dcast <- arrange(summary3Dcast, desc(total))
arrange(summary3Gram, desc(ngram))
head(arrange(summary3Gram, desc(ngram)))
head(arrange(summary3Gram, desc(ngram, clicks)))
head(arrange(summary3Gram, ascend(ngram, clicks)))
head(arrange(summary3Gram, asce(ngram, clicks)))
head(arrange(summary3Gram, desc(ngram, -clicks)))
head(arrange(summary3Gram, desc(ngram, Clicks)))
head(arrange(summary3Gram, desc(ngram, -Clicks)))
head(arrange(summary3Gram, desc(ngram)))
head(arrange(summary3Gram, -desc(ngram)))
head(arrange(summary3Gram, -desc(ngram, Clicks)))
head(arrange(summary3Gram, -desc(ngram, clicks)))
head(arrange(summary3Gram, -desc(c(ngram, clicks)))
)
head(arrange(summary3Gram, -desc(c(ngram, Clicks)))
)
head(arrange(summary3Gram, -desc(ngram)))
ggplot(graphSet01.S2, aes(x = logCost, y = logClicks)) + geom_bar() + ggtitle("Example Clicks to Cost Scatter Plot") + facet_wrap( ~ Labels, ncol = 2)
ggplot(graphSet01.S2, aes(x = logCost)) + geom_bar() + ggtitle("Example Clicks to Cost Scatter Plot") + facet_wrap( ~ Labels, ncol = 2)
ggplot(graphSet01.S2, aes(x = Clicks)) + geom_bar() + ggtitle("Example Clicks to Cost Scatter Plot") + facet_wrap( ~ Labels, ncol = 2)
ggplot(graphSet01.S2, aes(x = Clicks)) + geom_bar() + geom_density() + ggtitle("Example Clicks to Cost Scatter Plot") + facet_wrap( ~ Labels, ncol = 2)
ggplot(graphSet01.S2, aes(x = Clicks)) + geom_bar() + geom_density(aes(colour = "red")) + ggtitle("Example Clicks to Cost Scatter Plot") + facet_wrap( ~ Labels, ncol = 2)
ggplot(graphSet01.S2, aes(x = Clicks)) + geom_bar() + geom_density(aes(x = Clicks, colour = "red")) + ggtitle("Example Clicks to Cost Scatter Plot") + facet_wrap( ~ Labels, ncol = 2)
ggplot(graphSet01.S2, aes(x = Clicks, alpha = .5)) + geom_bar() + geom_density(aes(x = Clicks, colour = "red")) + ggtitle("Example Clicks to Cost Scatter Plot") + facet_wrap( ~ Labels, ncol = 2)
ggplot(graphSet01.S2, aes(x = Clicks, alpha = .5)) + geom_bar() + geom_density() + ggtitle("Example Clicks to Cost Scatter Plot") + facet_wrap( ~ Labels, ncol = 2)
ggplot(graphSet01.S2, aes(x = Clicks, alpha = .5)) + geom_histogram() + geom_density() + ggtitle("Example Clicks to Cost Scatter Plot") + facet_wrap( ~ Labels, ncol = 2)
ggplot(graphSet01.S2, aes(x = Clicks, alpha = .5)) + geom_density() + ggtitle("Example Clicks to Cost Scatter Plot") + facet_wrap( ~ Labels, ncol = 2)
ggplot(graphSet01.S2, aes(y = density, x = Clicks, alpha = .5)) + geom_histogram() + geom_density() + ggtitle("Example Clicks Histogram") + facet_wrap( ~ Labels, ncol = 2)
ggplot(graphSet01.S2, aes(x = Clicks, alpha = .5)) + geom_histogram() + ggtitle("Example Clicks Histogram") + facet_wrap( ~ Labels, ncol = 2)
ggplot(graphSet01.S2, aes(x = Clicks, alpha = .5)) + geom_density() + ggtitle("Example Clicks Histogram") + facet_wrap( ~ Labels, ncol = 2)
ggplot(graphSet01.S2, aes(x = logCost, y = logClicks)) + geom_point() + ggtitle("Example Clicks to Cost Scatter Plot") + facet_wrap( ~ Labels, ncol = 2)
ggplot(graphSet01.S2[Clicks > 10], aes(x = Clicks, y = cvr, size = sqrtCost)) + geom_point() + facet_wrap( ~ Labels, ncol = 2) + geom_text(aes(label = ifelse((Cost-mean(Cost))/sdCost > 3, ngram, "")), hjust = 1, vjust = 1) + ggtitle("Example CVR scatterplot by Labels [unfiltered]")
head(confSum.df)
head(arrange(confSum.df, -desc(n))
)
head(arrange(confSum.df, desc(n)))
head(arrange(confSum.df, -desc(n)))
ggplot(confSum.df, aes(x = Campaign, y = mcvr, group = 1)) + geom_errorbar(width=.1, aes(ymin = mcvr - ci, ymax = mcvr + ci)) + geom_point(shape = 21, size = 3, fill = "white") + facet_wrap( ~ Labels, ncol = 2) + geom_hline(data = confSum2.df, aes(yintercept = cvr)) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + scale_x_discrete(labels = abbreviate)
ggplot(confSum.df, aes(x = Campaign, y = mcvr, group = 1)) + geom_errorbar(width=.1, aes(ymin = mcvr - ci, ymax = mcvr + ci)) + geom_point(shape = n, size = 3, fill = "white") + facet_wrap( ~ Labels, ncol = 2) + geom_hline(data = confSum2.df, aes(yintercept = cvr)) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + scale_x_discrete(labels = abbreviate)
str(graphSet01.S2)
ggplot(graphSet01.S2, aes(x = cvr, y = Clicks)) + geom_point() + ggtitle("Example Clicks to CVR Scatter Plot") + facet_wrap( ~ Labels, ncol = 2)
ggplot(graphSet01.S2, aes(x = Clicks, y = cvr)) + geom_point() + ggtitle("Example Clicks to CVR Scatter Plot") + facet_wrap( ~ Labels, ncol = 2)
## Processing, analysis and visualisation.
summary2Gram <- aggregate(cbind(Cost, Clicks) ~ ngram + Labels, data = labelNgrams.work_file2, sum)
summary2Gram$cpc <- summary2Gram$Cost/summary2Gram$Clicks
summary2Gram$cpc[is.infinite(summary2Gram$cpc)] <- NA
## Basic display of clicks across labels per ngram.
summary2Dcast <- dcast(summary2Gram, ngram ~ Labels, value.var = 'Clicks', fun.aggregate = sum)
summary2Dcast$total <- rowSums(summary2Dcast[, c(2:3)])
summary2Dcast <- arrange(summary2Dcast, desc(total))
summary2Dcast
